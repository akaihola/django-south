
The South Database Abstraction Layer
------------------------------------

In order to fill the gap between raw SQL (not entirely database-agnostic) and
the Django ORM (which only allows for data-level operations, not column addition
or renaming, for example) South comes with a small database abstraction layer
that provides a common interface to functions like table and column creation,
renaming, and deletion.

These functions are all methods on the south.db.db object, which is dynamically
loaded at runtime to be the right module for the database defined by Django's
DATABASE_ENGINE setting.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

add_column(
    table_name,
    name,
    field,
)

Adds the column with name 'name' to the table 'table_name'. Uses the
'field' instance to determine the type and other options for the column.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

rename_column(table_name, old, new)

Renames column 'old' on 'table_name' to the name 'new'.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

delete_column(table_name, name)

Deletes the column 'name' on table 'table_name'.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

create_table(table_name, fields)

Creates the table 'table_name' with the given list of columns 'fields'.

'fields' is a list of 2-part tuples, where the first part is the field name,
and the second part is a valid django.db.models.fields.Field instance.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

rename_table(old_table_name, table_name)

Renames 'old_table_name' to 'table_name'.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

delete_table(table_name)

Deletes the table 'table_name'.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

execute(sql, params=[])

Executes the given raw SQL, optionally using the given parameters.
You should try to avoid using this, as it defeats the point of database
abstraction; if you find yourself using it a lot, consider adding a method to
this API (see CONTRIBUTING for more info).



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EXAMPLES:

Adding a new table:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from django.db import models
from south.db import db
from mysite.myapp.models import *
from mysite.anotherapp.models import Image

class Migration:
    
    def forwards(self):
        db.create_table('myapp_foobar', (
            ('name' , models.CharField(max_length=256)),
            ('sort_name' , models.CharField(max_length=256, blank=True)),
            ('description' , models.TextField(blank=True)),
            ('image' , models.ForeignKey(Image, related_name="foobar_images")),
            ('date_added' , models.DateTimeField(auto_now_add=True)),
            ('date_last_updated' , models.DateTimeField(auto_now=True)),
        ))
    
    def backwards(self):
        db.delete_table('myapp_foobar')


Adding a new column to the myapp_foobar table:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from django.db import models
from south.db import db
from mysite.myapp.models import *

class Migration:
    
    def forwards(self):
        db.add_column('myapp_foobar', 'bar', 
            models.ForeignKey(AnotherModelInMyApp, related_name='awesome_foobars', null=True))
    
    def backwards(self):
        db.delete_column('myapp_foobar', 'bar_id')


